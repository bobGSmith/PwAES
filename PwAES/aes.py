'''PASSWORD BASED AES ENCRYPTION

This allows password based AES encrypton of strings and text files. It can be imported as a module or ran as a script

To run as script, pass the following args: 
    * path (str) : file path to the text file to be encrypted or decrypted

This module contains the following functions: 
    * get_extension - returns the file extension of a path
    * anykey_exit - promps user to hit any key then exits the script
    * help_disply - displays doc string if incorrect number of args is passed or -h is passed
    * gen_pw_privatekey - generates a AES private key from a password string
    * write_cyphertext_file - takes path to text file and saves a encrypted version in the same directory
    * decrypt_cyphertext_file - decrypts a cyphertext file generated by write_cyphertext_file 
'''

from Crypto.Cipher import AES
import hashlib 
from pwinput import pwinput

def get_extension (path) : 
    return f'.{path.split(".")[-1]}'

def anykey_exit(): 
    input('hit any key to exit')
    exit()

def help_display (argv,n_args,docs):
    if len(argv) != n_args + 1:
        print('Error: incorrect number of args entered, see doc string below.\n')
        print(docs)
        input('Hit any key to exit')
        exit()
    if argv[1].lower() in ['-h','--help','h','help']:
        print(docs)
        input('Hit any key to exit')
        exit()
        
def gen_pw_privatekey () :
    pw = pwinput()
    return hashlib.sha256(pw.encode('utf-8')).digest()

def write_cyphertext_file (path,private_key):
    with open(path,'r') as infile: 
        b = (infile.read()).encode(encoding="utf-8")      
    cipher = AES.new(private_key,AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(b)
    outpath = f'{path.replace(get_extension(path),"")}_encrypted.txt'
    with open(outpath,'wb') as outfile: 
        outfile.write(tag + cipher.nonce + ciphertext)
        
def decrypt_cyphertext_file (path,private_key):
    with open(path,'rb') as infile:
        data = infile.read() 
    cipher = AES.new(private_key,AES.MODE_EAX,data[16:16+16])
    return (cipher.decrypt_and_verify(data[16+16:],data[0:16])).decode('utf-8')

def login (path_to_account_data) : 
    pw_privatekey = gen_pw_privatekey()
    account_data = decrypt_cyphertext_file(path_to_account_data,pw_privatekey)
    return account_data

if __name__ == '__main__': 
    import sys

    help_display(sys.argv,1,__doc__)
    path = sys.argv[1]
    encrypt = input('Encrypt or Decrypt (e/d) > ') 
    private_key = gen_pw_privatekey()
    
    if encrypt.lower() in ['e','encrypt']:
        write_cyphertext_file(path,private_key)
        anykey_exit()
            
    elif encrypt.lower() in ['d','decrypt']:
        display_or_save = input('Dispaly or save output (d/s) > ')
        decrypted = decrypt_cyphertext_file(path,private_key)
        if display_or_save in ['d','display']:
            print(decrypted)
            anykey_exit()
        elif display_or_save in ['s','save']:
            with open(path.replace('encrypted.txt','decrypted.txt'),'w') as outfile:
                outfile.write(decrypted)   
            anykey_exit()

        
    input('selection not recognised, hit any key to exit')
    exit()